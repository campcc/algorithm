/**
 * 给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 '/' 开头），请你将其转化为更加简洁的规范路径。
 * 在 Unix 风格的文件系统中，
 *
 * 1. 一个点（.）表示当前目录本身；
 * 2. 此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。
 * 3. 任意多个连续的斜杠（即，'//'）都被视为单个斜杠 '/' 。
 * 4. 对于此问题，任何其他格式的点（例如，'...'）均被视为文件/目录名称。
 *
 * 请注意，返回的 规范路径 必须遵循下述格式：
 *
 * 1. 始终以斜杠 '/' 开头。
 * 2. 两个目录名之间必须只有一个斜杠 '/' 。
 * 3. 最后一个目录名（如果存在）不能 以 '/' 结尾。
 * 4. 此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 '.' 或 '..'）。
 *
 * 返回简化后得到的 规范路径 。
 */

// 思路，使用 '/' 分割 path 得到路径数组，其中
// 1.多个连续的 / 分割后会得到空字符，无需处理
// 2.一个点表示当前目录本身，无需处理
// 3.目录名，直接入栈
// 4.两个点，需要切换目录到上一级，也就是删除栈顶目录
// 最后我们只需要将栈底到栈顶的字符串用 / 拼接，在前面加上 / 表示根目录返回即可
function simplifyPath(path) {
  var names = path.split("/"),
    stack = [];

  for (var name of names) {
    if (name.length && name !== "." && name !== "..") {
      stack.push(name);
    }
    if (name === ".." && stack.length) {
      stack.pop();
    }
  }

  return "/" + stack.join("/");
}
