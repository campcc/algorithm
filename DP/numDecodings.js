/**
 * 数字解码，给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数
 * s = "226" // 3, 可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6)
 * s = "06" // 0, "06" 无法映射到 "F" ，因为存在前导零（"6" 和 "06" 并不等价）
 */

// 226
// 1. (2 2 6)
// 2. (22 26)

// 动态规划
// 思路：由于字母对应数字的映射最多为 2 位数，我们可以考虑分两种情况处理，
// 1. 使用一个字符
// 2. 使用两个字符
// 我们将 dp[i] 定义为前 i 个数字一共由多少种解码方式

function numDecodings(s) {
  var n = s.length;

  if (n < 1) {
    return 0;
  }

  var dp = new Array(n + 1).fill(0);

  s = " " + s;

  dp[0] = 1;

  for (var i = 1; i <= n; i++) {
    var a = s[i] - 0,
      b = s[i] - 0 + s[i - 1] * 10;

    if (a >= 1 && a <= 9) {
      dp[i] = dp[i - 1];
    }

    if (b >= 10 && b <= 26) {
      dp[i] += dp[i - 2];
    }
  }

  return dp[n];
}

console.log(numDecodings("06"));
