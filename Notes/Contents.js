// 数组
// 1.二分查找（白板编程）
// 2.滑动窗口（异位词子串、最长子串、连续子数组）
// 3.双指针，头尾指针，快慢指针（回文字符串、最大面积、有序数组合并、删除数组重复元素、删除数组指定重复元素、反转字符串、有序数组求两数和）

// 查找表
// 1.哈希表（两数和、三数和、存在性判断、四元组、字母异位词、数组交集、异位词判断、快乐数）
// 2.双哈希，索引比较（字符规律、同构字符）
// 3.哈希频率（字符排序）

// 链表
// 1.反转（递归反转、迭代反转、给定区间反转、k 个一组反转）
// 2.去重（有序链表删除重复元素、无序链表删除重复元素、删除所有重复元素、删除当前节点、删除倒数第 N 个节点）
// 3.双指针，快慢指针（回文链表、求链表中点、环形链表、旋转链表，相邻节点交换）
// 4.求和（正向、逆向求和，进位相加）
// 5.排序（归并排序、插入排序、链表重排）
// 6.合并，拼接（有序链表合并、奇偶合并、k 个有序链表合并、分割）

// 队列
// 1.堆（构建堆、优先队列、topK）
// 2.二叉树层序遍历
// 3.广度优先搜索（完全平方数）

// 栈
// 1.有效括号、扁平化、unix 风格路径
// 2.二叉树前中后遍历（栈实现）

// 二叉树
// 1.遍历，存在性判断（白板编程，DFS、BFS）
// 2.反转（递归反转先反转当前节点然后递归反转左右子节点、层序遍历反转非叶子节点的左右节点）
// 3.最大、最小深度、判断平衡二叉树（递归左右子树深度最值 + 1，如果是最小深度需要考虑叶子节点空的情况、层序遍历，求最大时每次将当前层所有节点出队拓展，求最小时考虑入队时缓存深度，找到一个叶子节点直接返回）
// 4.节点数（层序遍历，递归）
// 5.路径、路径和（递归考虑叶子或非叶子、层序遍历维护同步路径队列，哈希表缓存父节点）
// 6.BST 二分搜索树（插入、查找、删除、求最值、前驱后驱节点、节点排名）
// 7.最近公共祖先（BST 可以利用特性，普通二叉树考虑哈希存储父节点）
// 8.BST 与中序遍历（判断 BST、构建 BST）

// 递归和回溯
// 1.排列，组合，子集（范围内 k 个数的所有组合，全排列，存在相同元素的全排列、电话号码的字母组合、子集、重复元素的子集）
// 2.二位空间的搜索（二位空间内是否存在某个值，二维空间的路径、岛屿数量、填充二维空间，可以考虑边界的行列）

// 递归记忆化搜索和动态规划
// 1.fib、爬楼梯
// 2.最大乘积
